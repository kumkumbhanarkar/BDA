def hanoi(n,S,D,A):
    if n==1 :
        print("Move dist 1 from",S,"to",D)
        return
    hanoi(n-1,S,A,D)
    print("Move disk",n,"from",S,"to",D)
    hanoi(n-1,A,D,S)
n=3
hanoi(n,'A','B','C')




import matplotlib.pyplot as plt
import time

def draw_hanoi(state, n):
    plt.figure(figsize=(2, 2))
    plt.xlim(-1, 3)
    plt.ylim(0, n+1)
    plt.xticks([1, 2, 3], ['A', 'B', 'C'])
    for peg in range(3):
        disks = state[peg]
        for i, disk in enumerate(disks):
            plt.bar(peg, 0.9, bottom=i, width=disk*0.3, color='red', align='center')
    plt.pause(0.5)
    plt.clf()

def tower_of_hanoi(n, source, auxiliary, destination, state):
    if n == 1:
        disk = state[source].pop()
        state[destination].append(disk)
        draw_hanoi(state, len(state[source]) + len(state[auxiliary]) + len(state[destination]))
        return
    tower_of_hanoi(n - 1, source, destination, auxiliary, state)
    disk = state[source].pop()
    state[destination].append(disk)
    draw_hanoi(state, len(state[source]) + len(state[auxiliary]) + len(state[destination]))
    tower_of_hanoi(n - 1, auxiliary, source, destination, state)

n = 3
state = [list(range(n, 0, -1)), [], []]
plt.ion()
draw_hanoi(state, n)
tower_of_hanoi(n, 0, 1, 2, state)
plt.ioff()
plt.show()
